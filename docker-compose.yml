services:
  api:
    image: python:3.12-slim
    container_name: sipcha-api
    restart: always
    environment:
      - JWT_SECRET=${JWT_SECRET:-change-me}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-1440}
      - ADMIN_PROVISIONING_TOKEN=${ADMIN_PROVISIONING_TOKEN:-change-me}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./api/app:/app
      - ./api/requirements.txt:/tmp/requirements.txt:ro
    command: >
      /bin/sh -lc "pip install --no-cache-dir -r /tmp/requirements.txt &&
      python -m uvicorn app.main:app --host 0.0.0.0 --port 8000"
    healthcheck:
      test: ["CMD", "python", "-c",
             "import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/healthz',timeout=3).getcode()==200 else sys.exit(1)"]
      interval: 10s
      timeout: 4s
      retries: 6
      start_period: 10s
    networks: [dokploy-network]
    expose:
      - "8000"     # internal-only for Nginx proxy (web) / Traefik
    ports:
      - ":8000"    # optional: publish to a random host port for direct testing
    labels:
      - "traefik.enable=false"   # keep API internal; Nginx (web) proxies /api -> api

  web-build:
    image: node:20-bookworm-slim
    container_name: sipcha-web-build
    working_dir: /src
    environment:
      - CI=1
      - npm_config_fund=false
      - npm_config_audit=false
    volumes:
      - ./web:/src
      - web_dist:/out
      - npm_cache:/root/.npm
    command: >
      sh -lc "
        set -e;
        node -v && npm -v;
        npm install --no-audit --no-fund;
        npx vite build || ./node_modules/.bin/vite build;
        rm -rf /out/*;
        cp -a dist/. /out/;
        ls -la /out
      "
    networks: [dokploy-network]

  web:
    image: nginx:alpine
    container_name: sipcha-web
    restart: always
    depends_on:
      web-build:
        condition: service_completed_successfully
      api:
        condition: service_healthy
    volumes:
      - web_dist:/usr/share/nginx/html:ro
      - ./web/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "sh", "-lc", "[ -f /usr/share/nginx/html/index.html ] && wget -qO- http://localhost/ >/dev/null" ]
      interval: 15s
      timeout: 5s
      retries: 5
    networks: [dokploy-network]
    expose:
      - "80"       # internal-only for Traefik
    ports:
      - ":80"      # optional: publish to a random host port for direct testing
    # Set HOST in your env or Dokploy UI (e.g., HOST=admin.yourdomain.com)
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dokploy-network"

      # HTTP router -> web service
      - "traefik.http.routers.sipcha-web.rule=Host(`${HOST}`)"
      - "traefik.http.routers.sipcha-web.entrypoints=web"
      - "traefik.http.services.sipcha-web.loadbalancer.server.port=80"

      # Uncomment if your Traefik has TLS (websecure) + certresolver configured
      # - "traefik.http.routers.sipcha-web-secure.rule=Host(`${HOST}`)"
      # - "traefik.http.routers.sipcha-web-secure.entrypoints=websecure"
      # - "traefik.http.routers.sipcha-web-secure.tls=true"
      # - "traefik.http.routers.sipcha-web-secure.tls.certresolver=letsencrypt"

networks:
  dokploy-network:
    external: true

volumes:
  web_dist:
  npm_cache:
